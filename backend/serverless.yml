service: BiteTutService

# Create an optimized package for lambda functions
package:
  individually: true

plugins:
  - serverless-bundle # Package functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  memorySize: 256
  profile: sz-${self:custom.currentStage}
  region: ${opt:region, 'us-east-1'}
  logRetentionInDays: 3
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 's3:*'
      # Temporary S3 bucket to store private assets
      Resource: 'arn:aws:s3:::bite-tut-poc-assets/*'
    - Effect: Allow
      Action:
        - ses:SendEmail
        - ses:SendRawEmail
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - 'sns:*'
      Resource: '*'
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:us-east-1:242421767634:table/UsersTable'

custom:
  defaultStage: dev
  # Load the current stage depending on the stage specified in the command line options, (or default to `dev` if unspecified)
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: bite-tut-user-pool-${self:custom.currentStage}
  userPoolClientName: bite-tut-user-pool-client-${self:custom.currentStage}
  bundle:
    linting: false # disable linting for lambda functions

functions:
  postUserCreation:
    handler: src/handler.postUserCreation
    description: publishes user data as SNS events after a user is created in the BiteTutUserPool
    events:
      - cognitoUserPool:
          pool: BiteTutUserPool
          trigger: PostConfirmation
          existing: true
  saveUser:
    handler: src/handler.saveUser
    description: save user data to DynamoDB
    events:
      - sns: 'arn:aws:sns:us-east-1:242421767634:confirm-user-creation'
  getUser:
    handler: src/handler.getUser
    description: fetch user account information from DynamoDB
    events:
      - http:
          path: /user/{sub}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updateUser:
    handler: src/handler.updateUser
    description: update user account information from DynamoDB
    events:
      - http:
          path: /user
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createCustomer:
    handler: src/handler.createCustomer
    events:
      - http:
          path: /customer
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  createSubscription:
    handler: src/handler.createSubscription
    events:
      - http:
          path: /subscription
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  updatePaymentMethod:
    handler: src/handler.updatePaymentMethod
    events:
      - http:
          path: /payment-method
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
  notifyInvoicePaid:
    handler: src/handler.notifyInvoicePaid
    events:
      - http:
          path: /notify-invoice-paid
          method: post
          cors: true
  createPrice:
    handler: src/handler.createPrice
    description: create product and price on Stripe whenever a product is published on Contentful
    events:
      - http:
          path: /create-price
          method: post
          cors: true

resources:
  # Cloudformation resources
  Resources:
    # DynamoDB table - users
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          # Use the Cognito sub as the partition key
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'

    CognitoUserPoolBiteTutUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
    CognitoUserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPoolBiteTutUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPoolBiteTutUserPool, Arn]
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPoolBiteTutUserPool
          - Arn
