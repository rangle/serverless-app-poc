service: stripe-billing-service

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin

provider:
  name: aws
  runtime: nodejs10.x
  profile: sz-dev

custom:
  defaultStage: dev
  currentStage: ${opt:stage, self:custom.defaultStage}
  userPoolName: tutorial-poc-user-pool-${self:custom.currentStage}
  userPoolClientName: tutorial-poc-user-pool-client-${self:custom.currentStage}

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  createSubscription:
    handler: src/handler.createSubscription
    events:
      - http:
          path: /subscription
          method: post
          cors: true
          # authorizer:
          #   type: COGNITO_USER_POOLS
          #   authorizerId:
          #     Ref: ApiGatewayAuthorizer
  notifyInvoicePaid:
    handler: src/handler.notifyInvoicePaid
    events:
      - http:
          path: /notify-invoice-paid
          method: post
          cors: true

# you can add CloudFormation resource templates here
resources:
  Resources:
    CognitoUserPool:
      Type: 'AWS::Cognito::UserPool'
      Properties:
        MfaConfiguration: OFF
        UserPoolName: ${self:custom.userPoolName}
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: False
            RequireNumbers: False
            RequireSymbols: False
            RequireUppercase: False
        Schema:
          - Name: name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: email
            AttributeDataType: String
            Mutable: false
            Required: true
    CognitoUserPoolClient:
      Type: 'AWS::Cognito::UserPoolClient'
      Properties:
        ClientName: ${self:custom.userPoolClientName}
        GenerateSecret: False
        UserPoolId:
          Ref: CognitoUserPool

    ApiGatewayAuthorizer:
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
  Outputs:
    CognitoUserPoolArn:
      Value:
        Fn::GetAtt:
          - CognitoUserPool
          - Arn
      Export:
        Name: CognitoUserPoolArn-${self:custom.currentStage}
